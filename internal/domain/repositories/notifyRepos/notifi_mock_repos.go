// Code generated by MockGen. DO NOT EDIT.
// Source: D:\Code\Golang\latipe-notification-service\internal\domain\repositories\notifyRepos\notifi_repos.go

// Package mock_notifyRepos is a generated GoMock package.
package notifyRepos

import (
	context "context"
	notication "latipe-notification-service/internal/domain/entities/notication"
	pagable "latipe-notification-service/pkgUtils/util/pagable"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNotificationRepository is a mock of NotificationRepository interface.
type MockNotificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationRepositoryMockRecorder
}

// MockNotificationRepositoryMockRecorder is the mock recorder for MockNotificationRepository.
type MockNotificationRepositoryMockRecorder struct {
	mock *MockNotificationRepository
}

// NewMockNotificationRepository creates a new mock instance.
func NewMockNotificationRepository(ctrl *gomock.Controller) *MockNotificationRepository {
	mock := &MockNotificationRepository{ctrl: ctrl}
	mock.recorder = &MockNotificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationRepository) EXPECT() *MockNotificationRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockNotificationRepository) Delete(ctx context.Context, entityId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, entityId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNotificationRepositoryMockRecorder) Delete(ctx, entityId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNotificationRepository)(nil).Delete), ctx, entityId)
}

// DeleteManyNotificationOfUser mocks base method.
func (m *MockNotificationRepository) DeleteManyNotificationOfUser(ctx context.Context, userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteManyNotificationOfUser", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteManyNotificationOfUser indicates an expected call of DeleteManyNotificationOfUser.
func (mr *MockNotificationRepositoryMockRecorder) DeleteManyNotificationOfUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteManyNotificationOfUser", reflect.TypeOf((*MockNotificationRepository)(nil).DeleteManyNotificationOfUser), ctx, userId)
}

// FindByID mocks base method.
func (m *MockNotificationRepository) FindByID(ctx context.Context, entityID string) (*notication.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, entityID)
	ret0, _ := ret[0].(*notication.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockNotificationRepositoryMockRecorder) FindByID(ctx, entityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockNotificationRepository)(nil).FindByID), ctx, entityID)
}

// FindByOwnerID mocks base method.
func (m *MockNotificationRepository) FindByOwnerID(ctx context.Context, OwnerID string, query *pagable.Query) ([]*notication.Notification, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByOwnerID", ctx, OwnerID, query)
	ret0, _ := ret[0].([]*notication.Notification)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByOwnerID indicates an expected call of FindByOwnerID.
func (mr *MockNotificationRepositoryMockRecorder) FindByOwnerID(ctx, OwnerID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByOwnerID", reflect.TypeOf((*MockNotificationRepository)(nil).FindByOwnerID), ctx, OwnerID, query)
}

// FindUnreadMessageOfUser mocks base method.
func (m *MockNotificationRepository) FindUnreadMessageOfUser(ctx context.Context, OwnerID string, query *pagable.Query) ([]*notication.Notification, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUnreadMessageOfUser", ctx, OwnerID, query)
	ret0, _ := ret[0].([]*notication.Notification)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindUnreadMessageOfUser indicates an expected call of FindUnreadMessageOfUser.
func (mr *MockNotificationRepositoryMockRecorder) FindUnreadMessageOfUser(ctx, OwnerID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUnreadMessageOfUser", reflect.TypeOf((*MockNotificationRepository)(nil).FindUnreadMessageOfUser), ctx, OwnerID, query)
}

// Save mocks base method.
func (m *MockNotificationRepository) Save(ctx context.Context, entity *notication.Notification) (*notication.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, entity)
	ret0, _ := ret[0].(*notication.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockNotificationRepositoryMockRecorder) Save(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockNotificationRepository)(nil).Save), ctx, entity)
}

// TotalUnreadMessageOfUser mocks base method.
func (m *MockNotificationRepository) TotalUnreadMessageOfUser(ctx context.Context, OwnerID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalUnreadMessageOfUser", ctx, OwnerID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalUnreadMessageOfUser indicates an expected call of TotalUnreadMessageOfUser.
func (mr *MockNotificationRepositoryMockRecorder) TotalUnreadMessageOfUser(ctx, OwnerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalUnreadMessageOfUser", reflect.TypeOf((*MockNotificationRepository)(nil).TotalUnreadMessageOfUser), ctx, OwnerID)
}

// Update mocks base method.
func (m *MockNotificationRepository) Update(ctx context.Context, entity *notication.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockNotificationRepositoryMockRecorder) Update(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNotificationRepository)(nil).Update), ctx, entity)
}

// UpdateAllReadMessageOfUser mocks base method.
func (m *MockNotificationRepository) UpdateAllReadMessageOfUser(ctx context.Context, OwnerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllReadMessageOfUser", ctx, OwnerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAllReadMessageOfUser indicates an expected call of UpdateAllReadMessageOfUser.
func (mr *MockNotificationRepositoryMockRecorder) UpdateAllReadMessageOfUser(ctx, OwnerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllReadMessageOfUser", reflect.TypeOf((*MockNotificationRepository)(nil).UpdateAllReadMessageOfUser), ctx, OwnerID)
}
