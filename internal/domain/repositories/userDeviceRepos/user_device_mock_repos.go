// Code generated by MockGen. DO NOT EDIT.
// Source: D:\Code\Golang\latipe-notification-service\internal\domain\repositories\userDeviceRepos\user_device_repos.go

// Package mock_userDeviceRepos is a generated GoMock package.
package userDeviceRepos

import (
	context "context"
	userDevice "latipe-notification-service/internal/domain/entities/userDevice"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserDeviceRepository is a mock of UserDeviceRepository interface.
type MockUserDeviceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserDeviceRepositoryMockRecorder
}

// MockUserDeviceRepositoryMockRecorder is the mock recorder for MockUserDeviceRepository.
type MockUserDeviceRepositoryMockRecorder struct {
	mock *MockUserDeviceRepository
}

// NewMockUserDeviceRepository creates a new mock instance.
func NewMockUserDeviceRepository(ctrl *gomock.Controller) *MockUserDeviceRepository {
	mock := &MockUserDeviceRepository{ctrl: ctrl}
	mock.recorder = &MockUserDeviceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDeviceRepository) EXPECT() *MockUserDeviceRepositoryMockRecorder {
	return m.recorder
}

// FindActiveDeviceByUserID mocks base method.
func (m *MockUserDeviceRepository) FindActiveDeviceByUserID(ctx context.Context, userID string) ([]*userDevice.UserDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActiveDeviceByUserID", ctx, userID)
	ret0, _ := ret[0].([]*userDevice.UserDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActiveDeviceByUserID indicates an expected call of FindActiveDeviceByUserID.
func (mr *MockUserDeviceRepositoryMockRecorder) FindActiveDeviceByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActiveDeviceByUserID", reflect.TypeOf((*MockUserDeviceRepository)(nil).FindActiveDeviceByUserID), ctx, userID)
}

// FindByDeviceID mocks base method.
func (m *MockUserDeviceRepository) FindByDeviceToken(ctx context.Context, deviceID string) (*userDevice.UserDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByDeviceToken", ctx, deviceID)
	ret0, _ := ret[0].(*userDevice.UserDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByDeviceID indicates an expected call of FindByDeviceID.
func (mr *MockUserDeviceRepositoryMockRecorder) FindByDeviceID(ctx, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByDeviceToken", reflect.TypeOf((*MockUserDeviceRepository)(nil).FindByDeviceToken), ctx, deviceID)
}

// FindByID mocks base method.
func (m *MockUserDeviceRepository) FindByID(ctx context.Context, entityID string) (*userDevice.UserDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, entityID)
	ret0, _ := ret[0].(*userDevice.UserDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockUserDeviceRepositoryMockRecorder) FindByID(ctx, entityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUserDeviceRepository)(nil).FindByID), ctx, entityID)
}

// GetAllActiveDeviceToken mocks base method.
func (m *MockUserDeviceRepository) GetAllActiveDeviceToken(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActiveDeviceToken", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllActiveDeviceToken indicates an expected call of GetAllActiveDeviceToken.
func (mr *MockUserDeviceRepositoryMockRecorder) GetAllActiveDeviceToken(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActiveDeviceToken", reflect.TypeOf((*MockUserDeviceRepository)(nil).GetAllActiveDeviceToken), ctx)
}

// Save mocks base method.
func (m *MockUserDeviceRepository) Save(ctx context.Context, entity *userDevice.UserDevice) (*userDevice.UserDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, entity)
	ret0, _ := ret[0].(*userDevice.UserDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockUserDeviceRepositoryMockRecorder) Save(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUserDeviceRepository)(nil).Save), ctx, entity)
}

// Update mocks base method.
func (m *MockUserDeviceRepository) Update(ctx context.Context, entity *userDevice.UserDevice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReadStatusNotification", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserDeviceRepositoryMockRecorder) Update(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReadStatusNotification", reflect.TypeOf((*MockUserDeviceRepository)(nil).Update), ctx, entity)
}
