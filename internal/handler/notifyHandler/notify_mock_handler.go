// Code generated by MockGen. DO NOT EDIT.
// Source: D:\Code\Golang\latipe-notification-service\internal\handler\notifyHandler\notify_api_handler.go

// Package notifyHandler is a generated GoMock package.
package notifyHandler

import (
	reflect "reflect"

	fiber "github.com/gofiber/fiber/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockNotifyHandler is a mock of NotifyHandler interface.
type MockNotifyHandler struct {
	ctrl     *gomock.Controller
	recorder *MockNotifyHandlerMockRecorder
}

// MockNotifyHandlerMockRecorder is the mock recorder for MockNotifyHandler.
type MockNotifyHandlerMockRecorder struct {
	mock *MockNotifyHandler
}

// NewMockNotifyHandler creates a new mock instance.
func NewMockNotifyHandler(ctrl *gomock.Controller) *MockNotifyHandler {
	mock := &MockNotifyHandler{ctrl: ctrl}
	mock.recorder = &MockNotifyHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifyHandler) EXPECT() *MockNotifyHandlerMockRecorder {
	return m.recorder
}

// ClearAllNotification mocks base method.
func (m *MockNotifyHandler) ClearAllNotification(ctx *fiber.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearAllNotification", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearAllNotification indicates an expected call of ClearAllNotification.
func (mr *MockNotifyHandlerMockRecorder) ClearAllNotification(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearAllNotification", reflect.TypeOf((*MockNotifyHandler)(nil).ClearAllNotification), ctx)
}

// GetNotificationDetail mocks base method.
func (m *MockNotifyHandler) GetNotificationDetail(ctx *fiber.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationDetail", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNotificationDetail indicates an expected call of GetNotificationDetail.
func (mr *MockNotifyHandlerMockRecorder) GetNotificationDetail(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationDetail", reflect.TypeOf((*MockNotifyHandler)(nil).GetNotificationDetail), ctx)
}

// GetNotificationsOfUser mocks base method.
func (m *MockNotifyHandler) GetNotificationsOfUser(ctx *fiber.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationsOfUser", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNotificationsOfUser indicates an expected call of GetNotificationsOfUser.
func (mr *MockNotifyHandlerMockRecorder) GetNotificationsOfUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationsOfUser", reflect.TypeOf((*MockNotifyHandler)(nil).GetNotificationsOfUser), ctx)
}

// MarkAsRead mocks base method.
func (m *MockNotifyHandler) MarkAsRead(ctx *fiber.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAllRead", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsRead indicates an expected call of MarkAsRead.
func (mr *MockNotifyHandlerMockRecorder) MarkAsRead(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAllRead", reflect.TypeOf((*MockNotifyHandler)(nil).MarkAsRead), ctx)
}

// SendCampaignNotification mocks base method.
func (m *MockNotifyHandler) SendCampaignNotification(ctx *fiber.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCampaignInternalService", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCampaignNotification indicates an expected call of SendCampaignNotification.
func (mr *MockNotifyHandlerMockRecorder) SendCampaignNotification(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCampaignInternalService", reflect.TypeOf((*MockNotifyHandler)(nil).SendCampaignNotification), ctx)
}

// SendNotification mocks base method.
func (m *MockNotifyHandler) SendNotification(ctx *fiber.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotification", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNotification indicates an expected call of SendNotification.
func (mr *MockNotifyHandlerMockRecorder) SendNotification(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockNotifyHandler)(nil).SendNotification), ctx)
}

// TotalUnreadNotification mocks base method.
func (m *MockNotifyHandler) TotalUnreadNotification(ctx *fiber.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalUnreadNotification", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// TotalUnreadNotification indicates an expected call of TotalUnreadNotification.
func (mr *MockNotifyHandlerMockRecorder) TotalUnreadNotification(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalUnreadNotification", reflect.TypeOf((*MockNotifyHandler)(nil).TotalUnreadNotification), ctx)
}
