// Code generated by MockGen. DO NOT EDIT.
// Source: D:\Code\Golang\latipe-notification-service\internal\service\notifyService\notication_usecase.go

// Package notifyService is a generated GoMock package.
package notifyService

import (
	dto "latipe-notification-service/internal/domain/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNotificationService is a mock of NotificationService interface.
type MockNotificationService struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationServiceMockRecorder
}

// MockNotificationServiceMockRecorder is the mock recorder for MockNotificationService.
type MockNotificationServiceMockRecorder struct {
	mock *MockNotificationService
}

// NewMockNotificationService creates a new mock instance.
func NewMockNotificationService(ctrl *gomock.Controller) *MockNotificationService {
	mock := &MockNotificationService{ctrl: ctrl}
	mock.recorder = &MockNotificationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationService) EXPECT() *MockNotificationServiceMockRecorder {
	return m.recorder
}

// ClearAllNotification mocks base method.
func (m *MockNotificationService) ClearAllNotification(req *dto.ClearNotificationRequest) (*dto.ClearNotificationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearAllNotification", req)
	ret0, _ := ret[0].(*dto.ClearNotificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearAllNotification indicates an expected call of ClearAllNotification.
func (mr *MockNotificationServiceMockRecorder) ClearAllNotification(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearAllNotification", reflect.TypeOf((*MockNotificationService)(nil).ClearAllNotification), req)
}

// GetNotificationDetail mocks base method.
func (m *MockNotificationService) GetNotificationDetail(req *dto.GetNotificationDetailRequest) (*dto.GetNotificationDetailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationDetail", req)
	ret0, _ := ret[0].(*dto.GetNotificationDetailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationDetail indicates an expected call of GetNotificationDetail.
func (mr *MockNotificationServiceMockRecorder) GetNotificationDetail(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationDetail", reflect.TypeOf((*MockNotificationService)(nil).GetNotificationDetail), req)
}

// GetNotificationsOfUser mocks base method.
func (m *MockNotificationService) GetNotificationsOfUser(req *dto.GetNotificationsRequest) (*dto.GetNotificationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationsOfUser", req)
	ret0, _ := ret[0].(*dto.GetNotificationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationsOfUser indicates an expected call of GetNotificationsOfUser.
func (mr *MockNotificationServiceMockRecorder) GetNotificationsOfUser(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationsOfUser", reflect.TypeOf((*MockNotificationService)(nil).GetNotificationsOfUser), req)
}

// MarkAsRead mocks base method.
func (m *MockNotificationService) MarkAsRead(req *dto.MarkAsReadRequest) (*dto.MarkAsReadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsRead", req)
	ret0, _ := ret[0].(*dto.MarkAsReadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkAsRead indicates an expected call of MarkAsRead.
func (mr *MockNotificationServiceMockRecorder) MarkAsRead(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsRead", reflect.TypeOf((*MockNotificationService)(nil).MarkAsRead), req)
}

// SendNotification mocks base method.
func (m *MockNotificationService) SendNotification(req *dto.SendNotificationRequest) (*dto.SendNotificationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotification", req)
	ret0, _ := ret[0].(*dto.SendNotificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendNotification indicates an expected call of SendNotification.
func (mr *MockNotificationServiceMockRecorder) SendNotification(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockNotificationService)(nil).SendNotification), req)
}

// TotalUnreadNotification mocks base method.
func (m *MockNotificationService) TotalUnreadNotification(req *dto.TotalUnreadNotificationRequest) (*dto.TotalUnreadNotificationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalUnreadNotification", req)
	ret0, _ := ret[0].(*dto.TotalUnreadNotificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalUnreadNotification indicates an expected call of TotalUnreadNotification.
func (mr *MockNotificationServiceMockRecorder) TotalUnreadNotification(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalUnreadNotification", reflect.TypeOf((*MockNotificationService)(nil).TotalUnreadNotification), req)
}
