// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"github.com/ansrivas/fiberprometheus/v2"
	"github.com/bytedance/sonic"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"latipe-notification-service/config"
	"latipe-notification-service/internal/adapter/authserv"
	"latipe-notification-service/internal/domain/repositories/notifyRepos"
	"latipe-notification-service/internal/domain/repositories/userDeviceRepos"
	"latipe-notification-service/internal/handler/notifyHandler"
	"latipe-notification-service/internal/middleware"
	"latipe-notification-service/internal/router/notifyRouter"
	"latipe-notification-service/internal/service/notifyService"
	"latipe-notification-service/pkgUtils/db/mongodb"
	"latipe-notification-service/pkgUtils/fcm"
)

// Injectors from server.go:

func New() (*Application, error) {
	appConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	mongoClient, err := mongodb.OpenMongoDBConnection(appConfig)
	if err != nil {
		return nil, err
	}
	notificationRepository := notifyRepos.NewNotificationRepository(mongoClient)
	userDeviceRepository := userDeviceRepos.NewUserDeviceRepository(mongoClient)
	firebaseCloudMessage := fcm.NewFirebaseSDK(appConfig)
	notificationService := notifyService.NewNotificationService(notificationRepository, userDeviceRepository, firebaseCloudMessage)
	notifyHandlerNotifyHandler := notifyHandler.NewNotifyHandler(notificationService)
	authService := authserv.NewAuthService(appConfig)
	authMiddleware := middleware.NewAuthMiddleware(authService)
	notificationRouter := notifyRouter.NewNotificationRouter(notifyHandlerNotifyHandler, authMiddleware)
	application := NewServer(appConfig, notificationRouter)
	return application, nil
}

// server.go:

type Application struct {
	fiberApp  *fiber.App
	appConfig *config.AppConfig
}

func (app Application) FiberApp() *fiber.App {
	return app.fiberApp
}

func (app Application) AppConfig() *config.AppConfig {
	return app.appConfig
}

func NewServer(
	cfg *config.AppConfig, notifyRouter2 notifyRouter.NotificationRouter,

) *Application {

	app := fiber.New(fiber.Config{
		ReadTimeout:  cfg.Server.ReadTimeout,
		WriteTimeout: cfg.Server.WriteTimeout,
		JSONDecoder:  sonic.Unmarshal,
		JSONEncoder:  sonic.Marshal,
	})

	prometheus := fiberprometheus.New("notification-service")
	prometheus.RegisterAt(app, "/metrics")
	app.Use(prometheus.Middleware)

	app.Use(logger.New())

	app.Get("", func(ctx *fiber.Ctx) error {
		s := struct {
			Message string `json:"message"`
			Version string `json:"version"`
		}{
			Message: "notification service was developed by tdatIT",
			Version: "v1.0.0",
		}
		return ctx.JSON(s)
	})
	api := app.Group("/api")
	v1 := api.Group("/v1")
	notifyRouter2.
		Init(&v1)

	return &Application{
		appConfig: cfg,
		fiberApp:  app,
	}
}
