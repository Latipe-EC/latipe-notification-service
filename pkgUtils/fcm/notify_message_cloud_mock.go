// Code generated by MockGen. DO NOT EDIT.
// Source: D:\Code\Golang\latipe-notification-service\pkgUtils\fcm\notify_message_cloud.go

// Package mock_fcm is a generated GoMock package.
package fcm

import (
	context "context"
	reflect "reflect"

	messaging "firebase.google.com/go/messaging"
	gomock "github.com/golang/mock/gomock"
)

// MockNotificationCloudMessage is a mock of NotificationCloudMessage interface.
type MockNotificationCloudMessage struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationCloudMessageMockRecorder
}

// MockNotificationCloudMessageMockRecorder is the mock recorder for MockNotificationCloudMessage.
type MockNotificationCloudMessageMockRecorder struct {
	mock *MockNotificationCloudMessage
}

// NewMockNotificationCloudMessage creates a new mock instance.
func NewMockNotificationCloudMessage(ctrl *gomock.Controller) *MockNotificationCloudMessage {
	mock := &MockNotificationCloudMessage{ctrl: ctrl}
	mock.recorder = &MockNotificationCloudMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationCloudMessage) EXPECT() *MockNotificationCloudMessageMockRecorder {
	return m.recorder
}

// SendToCondition mocks base method.
func (m *MockNotificationCloudMessage) SendToCondition(ctx context.Context, message *messaging.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToCondition", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendToCondition indicates an expected call of SendToCondition.
func (mr *MockNotificationCloudMessageMockRecorder) SendToCondition(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToCondition", reflect.TypeOf((*MockNotificationCloudMessage)(nil).SendToCondition), ctx, message)
}

// SendToDeviceGroup mocks base method.
func (m *MockNotificationCloudMessage) SendToDeviceGroup(ctx context.Context, message *messaging.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToDeviceGroup", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendToDeviceGroup indicates an expected call of SendToDeviceGroup.
func (mr *MockNotificationCloudMessageMockRecorder) SendToDeviceGroup(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToDeviceGroup", reflect.TypeOf((*MockNotificationCloudMessage)(nil).SendToDeviceGroup), ctx, message)
}

// SendToMultipleDevices mocks base method.
func (m *MockNotificationCloudMessage) SendToMultipleDevices(ctx context.Context, message *messaging.MulticastMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToMultipleDevices", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendToMultipleDevices indicates an expected call of SendToMultipleDevices.
func (mr *MockNotificationCloudMessageMockRecorder) SendToMultipleDevices(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToMultipleDevices", reflect.TypeOf((*MockNotificationCloudMessage)(nil).SendToMultipleDevices), ctx, message)
}

// SendToSingleDevice mocks base method.
func (m *MockNotificationCloudMessage) SendToSingleDevice(ctx context.Context, message *messaging.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToSingleDevice", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendToSingleDevice indicates an expected call of SendToSingleDevice.
func (mr *MockNotificationCloudMessageMockRecorder) SendToSingleDevice(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToSingleDevice", reflect.TypeOf((*MockNotificationCloudMessage)(nil).SendToSingleDevice), ctx, message)
}

// SendToTopic mocks base method.
func (m *MockNotificationCloudMessage) SendToTopic(ctx context.Context, message *messaging.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToTopic", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendToTopic indicates an expected call of SendToTopic.
func (mr *MockNotificationCloudMessageMockRecorder) SendToTopic(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToTopic", reflect.TypeOf((*MockNotificationCloudMessage)(nil).SendToTopic), ctx, message)
}

// SubscribeToTopic mocks base method.
func (m *MockNotificationCloudMessage) SubscribeToTopic(ctx context.Context, registrationTokens []string, topic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToTopic", ctx, registrationTokens, topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToTopic indicates an expected call of SubscribeToTopic.
func (mr *MockNotificationCloudMessageMockRecorder) SubscribeToTopic(ctx, registrationTokens, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToTopic", reflect.TypeOf((*MockNotificationCloudMessage)(nil).SubscribeToTopic), ctx, registrationTokens, topic)
}

// UnsubscribeFromTopic mocks base method.
func (m *MockNotificationCloudMessage) UnsubscribeFromTopic(ctx context.Context, registrationTokens []string, topic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsubscribeFromTopic", ctx, registrationTokens, topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsubscribeFromTopic indicates an expected call of UnsubscribeFromTopic.
func (mr *MockNotificationCloudMessageMockRecorder) UnsubscribeFromTopic(ctx, registrationTokens, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeFromTopic", reflect.TypeOf((*MockNotificationCloudMessage)(nil).UnsubscribeFromTopic), ctx, registrationTokens, topic)
}
